from bson import ObjectId
from pydantic import BaseModel, Field

from app.utils.shared import PyObjectId, UsernameGenerator

"""
ModelName:
    User model for the accounts service.
    This model is used to define the structure of the user data that will be stored in the database.

Fields:
    id: Id of the user.
    username: Username autogenerated by the system unique algorithm, focused on privacy.
    avatar_url: URL of the user's avatar. Also typically generated on user's request.
    device_hash: An hash that identifies the user's device. It is hashed from a bunch of unique device data.
    registered_at: Date of the user's signup.
    last_modified: Date of the user's last profile update.
    last_active: Date of the user's last activity on the platform.
    status: User's status. Can be 'active', 'banned', 'suspended', 'deleted'.
    roles: List of roles that the user has. Roles are used to define the user's permissions.
    has_subscribed: Flag that indicates if the user has subscribed to the platform.
    is_verified: A user is verified when they have setup biometrics (fingerprint + device registration).
    settings: User's settings. Used to store user's preferences and configurations.
        - preferred_language: User's preferred language.
        - theme: User's preferred theme.
        - notifications: User's notification settings.
        - biometrics: User's biometric settings such as fingerprint, passkey, etc.
"""
class UserModel(BaseModel):
    # Required fields
    id: PyObjectId = Field(default_factory=PyObjectId, alias="_id", description="Id of the user.")
    username: str = Field(
        description="Username autogenerated by the system unique algorithm, focused on privacy.",
        examples=["faddac_1", "edebbe_2", "bafcab_3"],
        default_factory=UsernameGenerator
    )

    # Optional fields
    avatar_url: str = Field(
        description="URL of the user's avatar. Also typically generated on user's request.",
        examples=["https://example.com/avatar.jpg"],
        default=None,
        pattern="^https?://.*$"
    )

